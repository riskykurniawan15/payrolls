// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	attendance "github.com/riskykurniawan15/payrolls/models/attendance"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockIAttendanceRepository is an autogenerated mock type for the IAttendanceRepository type
type MockIAttendanceRepository struct {
	mock.Mock
}

type MockIAttendanceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAttendanceRepository) EXPECT() *MockIAttendanceRepository_Expecter {
	return &MockIAttendanceRepository_Expecter{mock: &_m.Mock}
}

// CreateAttendance provides a mock function with given fields: ctx, _a1
func (_m *MockIAttendanceRepository) CreateAttendance(ctx context.Context, _a1 attendance.Attendance) (attendance.Attendance, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttendance")
	}

	var r0 attendance.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, attendance.Attendance) (attendance.Attendance, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, attendance.Attendance) attendance.Attendance); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(attendance.Attendance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, attendance.Attendance) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAttendanceRepository_CreateAttendance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAttendance'
type MockIAttendanceRepository_CreateAttendance_Call struct {
	*mock.Call
}

// CreateAttendance is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 attendance.Attendance
func (_e *MockIAttendanceRepository_Expecter) CreateAttendance(ctx interface{}, _a1 interface{}) *MockIAttendanceRepository_CreateAttendance_Call {
	return &MockIAttendanceRepository_CreateAttendance_Call{Call: _e.mock.On("CreateAttendance", ctx, _a1)}
}

func (_c *MockIAttendanceRepository_CreateAttendance_Call) Run(run func(ctx context.Context, _a1 attendance.Attendance)) *MockIAttendanceRepository_CreateAttendance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(attendance.Attendance))
	})
	return _c
}

func (_c *MockIAttendanceRepository_CreateAttendance_Call) Return(_a0 attendance.Attendance, _a1 error) *MockIAttendanceRepository_CreateAttendance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAttendanceRepository_CreateAttendance_Call) RunAndReturn(run func(context.Context, attendance.Attendance) (attendance.Attendance, error)) *MockIAttendanceRepository_CreateAttendance_Call {
	_c.Call.Return(run)
	return _c
}

// GetAttendanceByID provides a mock function with given fields: ctx, id, userID
func (_m *MockIAttendanceRepository) GetAttendanceByID(ctx context.Context, id uint, userID uint) (attendance.Attendance, error) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAttendanceByID")
	}

	var r0 attendance.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) (attendance.Attendance, error)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) attendance.Attendance); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Get(0).(attendance.Attendance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAttendanceRepository_GetAttendanceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttendanceByID'
type MockIAttendanceRepository_GetAttendanceByID_Call struct {
	*mock.Call
}

// GetAttendanceByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
//   - userID uint
func (_e *MockIAttendanceRepository_Expecter) GetAttendanceByID(ctx interface{}, id interface{}, userID interface{}) *MockIAttendanceRepository_GetAttendanceByID_Call {
	return &MockIAttendanceRepository_GetAttendanceByID_Call{Call: _e.mock.On("GetAttendanceByID", ctx, id, userID)}
}

func (_c *MockIAttendanceRepository_GetAttendanceByID_Call) Run(run func(ctx context.Context, id uint, userID uint)) *MockIAttendanceRepository_GetAttendanceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(uint))
	})
	return _c
}

func (_c *MockIAttendanceRepository_GetAttendanceByID_Call) Return(_a0 attendance.Attendance, _a1 error) *MockIAttendanceRepository_GetAttendanceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAttendanceRepository_GetAttendanceByID_Call) RunAndReturn(run func(context.Context, uint, uint) (attendance.Attendance, error)) *MockIAttendanceRepository_GetAttendanceByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAttendanceByIDForUpdate provides a mock function with given fields: ctx, id, userID
func (_m *MockIAttendanceRepository) GetAttendanceByIDForUpdate(ctx context.Context, id uint, userID uint) (attendance.Attendance, error) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAttendanceByIDForUpdate")
	}

	var r0 attendance.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) (attendance.Attendance, error)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) attendance.Attendance); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Get(0).(attendance.Attendance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAttendanceRepository_GetAttendanceByIDForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttendanceByIDForUpdate'
type MockIAttendanceRepository_GetAttendanceByIDForUpdate_Call struct {
	*mock.Call
}

// GetAttendanceByIDForUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
//   - userID uint
func (_e *MockIAttendanceRepository_Expecter) GetAttendanceByIDForUpdate(ctx interface{}, id interface{}, userID interface{}) *MockIAttendanceRepository_GetAttendanceByIDForUpdate_Call {
	return &MockIAttendanceRepository_GetAttendanceByIDForUpdate_Call{Call: _e.mock.On("GetAttendanceByIDForUpdate", ctx, id, userID)}
}

func (_c *MockIAttendanceRepository_GetAttendanceByIDForUpdate_Call) Run(run func(ctx context.Context, id uint, userID uint)) *MockIAttendanceRepository_GetAttendanceByIDForUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(uint))
	})
	return _c
}

func (_c *MockIAttendanceRepository_GetAttendanceByIDForUpdate_Call) Return(_a0 attendance.Attendance, _a1 error) *MockIAttendanceRepository_GetAttendanceByIDForUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAttendanceRepository_GetAttendanceByIDForUpdate_Call) RunAndReturn(run func(context.Context, uint, uint) (attendance.Attendance, error)) *MockIAttendanceRepository_GetAttendanceByIDForUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAttendances provides a mock function with given fields: ctx, userID, page, limit, startDate, endDate
func (_m *MockIAttendanceRepository) GetAttendances(ctx context.Context, userID uint, page int, limit int, startDate *time.Time, endDate *time.Time) ([]attendance.Attendance, int64, error) {
	ret := _m.Called(ctx, userID, page, limit, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetAttendances")
	}

	var r0 []attendance.Attendance
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, int, int, *time.Time, *time.Time) ([]attendance.Attendance, int64, error)); ok {
		return rf(ctx, userID, page, limit, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, int, int, *time.Time, *time.Time) []attendance.Attendance); ok {
		r0 = rf(ctx, userID, page, limit, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]attendance.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, int, int, *time.Time, *time.Time) int64); ok {
		r1 = rf(ctx, userID, page, limit, startDate, endDate)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint, int, int, *time.Time, *time.Time) error); ok {
		r2 = rf(ctx, userID, page, limit, startDate, endDate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIAttendanceRepository_GetAttendances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttendances'
type MockIAttendanceRepository_GetAttendances_Call struct {
	*mock.Call
}

// GetAttendances is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint
//   - page int
//   - limit int
//   - startDate *time.Time
//   - endDate *time.Time
func (_e *MockIAttendanceRepository_Expecter) GetAttendances(ctx interface{}, userID interface{}, page interface{}, limit interface{}, startDate interface{}, endDate interface{}) *MockIAttendanceRepository_GetAttendances_Call {
	return &MockIAttendanceRepository_GetAttendances_Call{Call: _e.mock.On("GetAttendances", ctx, userID, page, limit, startDate, endDate)}
}

func (_c *MockIAttendanceRepository_GetAttendances_Call) Run(run func(ctx context.Context, userID uint, page int, limit int, startDate *time.Time, endDate *time.Time)) *MockIAttendanceRepository_GetAttendances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(int), args[3].(int), args[4].(*time.Time), args[5].(*time.Time))
	})
	return _c
}

func (_c *MockIAttendanceRepository_GetAttendances_Call) Return(_a0 []attendance.Attendance, _a1 int64, _a2 error) *MockIAttendanceRepository_GetAttendances_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIAttendanceRepository_GetAttendances_Call) RunAndReturn(run func(context.Context, uint, int, int, *time.Time, *time.Time) ([]attendance.Attendance, int64, error)) *MockIAttendanceRepository_GetAttendances_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserAndDate provides a mock function with given fields: ctx, userID, date
func (_m *MockIAttendanceRepository) GetByUserAndDate(ctx context.Context, userID uint, date time.Time) (*attendance.Attendance, error) {
	ret := _m.Called(ctx, userID, date)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserAndDate")
	}

	var r0 *attendance.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, time.Time) (*attendance.Attendance, error)); ok {
		return rf(ctx, userID, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, time.Time) *attendance.Attendance); ok {
		r0 = rf(ctx, userID, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attendance.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, time.Time) error); ok {
		r1 = rf(ctx, userID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAttendanceRepository_GetByUserAndDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserAndDate'
type MockIAttendanceRepository_GetByUserAndDate_Call struct {
	*mock.Call
}

// GetByUserAndDate is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint
//   - date time.Time
func (_e *MockIAttendanceRepository_Expecter) GetByUserAndDate(ctx interface{}, userID interface{}, date interface{}) *MockIAttendanceRepository_GetByUserAndDate_Call {
	return &MockIAttendanceRepository_GetByUserAndDate_Call{Call: _e.mock.On("GetByUserAndDate", ctx, userID, date)}
}

func (_c *MockIAttendanceRepository_GetByUserAndDate_Call) Run(run func(ctx context.Context, userID uint, date time.Time)) *MockIAttendanceRepository_GetByUserAndDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(time.Time))
	})
	return _c
}

func (_c *MockIAttendanceRepository_GetByUserAndDate_Call) Return(_a0 *attendance.Attendance, _a1 error) *MockIAttendanceRepository_GetByUserAndDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAttendanceRepository_GetByUserAndDate_Call) RunAndReturn(run func(context.Context, uint, time.Time) (*attendance.Attendance, error)) *MockIAttendanceRepository_GetByUserAndDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestCheckInByUserID provides a mock function with given fields: ctx, userID, date
func (_m *MockIAttendanceRepository) GetLatestCheckInByUserID(ctx context.Context, userID uint, date *time.Time) (attendance.Attendance, error) {
	ret := _m.Called(ctx, userID, date)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestCheckInByUserID")
	}

	var r0 attendance.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, *time.Time) (attendance.Attendance, error)); ok {
		return rf(ctx, userID, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, *time.Time) attendance.Attendance); ok {
		r0 = rf(ctx, userID, date)
	} else {
		r0 = ret.Get(0).(attendance.Attendance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, *time.Time) error); ok {
		r1 = rf(ctx, userID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAttendanceRepository_GetLatestCheckInByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestCheckInByUserID'
type MockIAttendanceRepository_GetLatestCheckInByUserID_Call struct {
	*mock.Call
}

// GetLatestCheckInByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint
//   - date *time.Time
func (_e *MockIAttendanceRepository_Expecter) GetLatestCheckInByUserID(ctx interface{}, userID interface{}, date interface{}) *MockIAttendanceRepository_GetLatestCheckInByUserID_Call {
	return &MockIAttendanceRepository_GetLatestCheckInByUserID_Call{Call: _e.mock.On("GetLatestCheckInByUserID", ctx, userID, date)}
}

func (_c *MockIAttendanceRepository_GetLatestCheckInByUserID_Call) Run(run func(ctx context.Context, userID uint, date *time.Time)) *MockIAttendanceRepository_GetLatestCheckInByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(*time.Time))
	})
	return _c
}

func (_c *MockIAttendanceRepository_GetLatestCheckInByUserID_Call) Return(_a0 attendance.Attendance, _a1 error) *MockIAttendanceRepository_GetLatestCheckInByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAttendanceRepository_GetLatestCheckInByUserID_Call) RunAndReturn(run func(context.Context, uint, *time.Time) (attendance.Attendance, error)) *MockIAttendanceRepository_GetLatestCheckInByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAttendance provides a mock function with given fields: ctx, _a1
func (_m *MockIAttendanceRepository) UpdateAttendance(ctx context.Context, _a1 attendance.Attendance) (attendance.Attendance, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAttendance")
	}

	var r0 attendance.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, attendance.Attendance) (attendance.Attendance, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, attendance.Attendance) attendance.Attendance); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(attendance.Attendance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, attendance.Attendance) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAttendanceRepository_UpdateAttendance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAttendance'
type MockIAttendanceRepository_UpdateAttendance_Call struct {
	*mock.Call
}

// UpdateAttendance is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 attendance.Attendance
func (_e *MockIAttendanceRepository_Expecter) UpdateAttendance(ctx interface{}, _a1 interface{}) *MockIAttendanceRepository_UpdateAttendance_Call {
	return &MockIAttendanceRepository_UpdateAttendance_Call{Call: _e.mock.On("UpdateAttendance", ctx, _a1)}
}

func (_c *MockIAttendanceRepository_UpdateAttendance_Call) Run(run func(ctx context.Context, _a1 attendance.Attendance)) *MockIAttendanceRepository_UpdateAttendance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(attendance.Attendance))
	})
	return _c
}

func (_c *MockIAttendanceRepository_UpdateAttendance_Call) Return(_a0 attendance.Attendance, _a1 error) *MockIAttendanceRepository_UpdateAttendance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAttendanceRepository_UpdateAttendance_Call) RunAndReturn(run func(context.Context, attendance.Attendance) (attendance.Attendance, error)) *MockIAttendanceRepository_UpdateAttendance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAttendanceRepository creates a new instance of MockIAttendanceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAttendanceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAttendanceRepository {
	mock := &MockIAttendanceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
