// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	payslip "github.com/riskykurniawan15/payrolls/models/payslip"
	mock "github.com/stretchr/testify/mock"

	period_detail "github.com/riskykurniawan15/payrolls/models/period_detail"
)

// MockIPeriodDetailRepository is an autogenerated mock type for the IPeriodDetailRepository type
type MockIPeriodDetailRepository struct {
	mock.Mock
}

type MockIPeriodDetailRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIPeriodDetailRepository) EXPECT() *MockIPeriodDetailRepository_Expecter {
	return &MockIPeriodDetailRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, periodDetail
func (_m *MockIPeriodDetailRepository) Create(ctx context.Context, periodDetail *period_detail.PeriodDetail) error {
	ret := _m.Called(ctx, periodDetail)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *period_detail.PeriodDetail) error); ok {
		r0 = rf(ctx, periodDetail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIPeriodDetailRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIPeriodDetailRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - periodDetail *period_detail.PeriodDetail
func (_e *MockIPeriodDetailRepository_Expecter) Create(ctx interface{}, periodDetail interface{}) *MockIPeriodDetailRepository_Create_Call {
	return &MockIPeriodDetailRepository_Create_Call{Call: _e.mock.On("Create", ctx, periodDetail)}
}

func (_c *MockIPeriodDetailRepository_Create_Call) Run(run func(ctx context.Context, periodDetail *period_detail.PeriodDetail)) *MockIPeriodDetailRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*period_detail.PeriodDetail))
	})
	return _c
}

func (_c *MockIPeriodDetailRepository_Create_Call) Return(_a0 error) *MockIPeriodDetailRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIPeriodDetailRepository_Create_Call) RunAndReturn(run func(context.Context, *period_detail.PeriodDetail) error) *MockIPeriodDetailRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBatch provides a mock function with given fields: ctx, periodDetails
func (_m *MockIPeriodDetailRepository) CreateBatch(ctx context.Context, periodDetails []period_detail.PeriodDetail) error {
	ret := _m.Called(ctx, periodDetails)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []period_detail.PeriodDetail) error); ok {
		r0 = rf(ctx, periodDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIPeriodDetailRepository_CreateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBatch'
type MockIPeriodDetailRepository_CreateBatch_Call struct {
	*mock.Call
}

// CreateBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - periodDetails []period_detail.PeriodDetail
func (_e *MockIPeriodDetailRepository_Expecter) CreateBatch(ctx interface{}, periodDetails interface{}) *MockIPeriodDetailRepository_CreateBatch_Call {
	return &MockIPeriodDetailRepository_CreateBatch_Call{Call: _e.mock.On("CreateBatch", ctx, periodDetails)}
}

func (_c *MockIPeriodDetailRepository_CreateBatch_Call) Run(run func(ctx context.Context, periodDetails []period_detail.PeriodDetail)) *MockIPeriodDetailRepository_CreateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]period_detail.PeriodDetail))
	})
	return _c
}

func (_c *MockIPeriodDetailRepository_CreateBatch_Call) Return(_a0 error) *MockIPeriodDetailRepository_CreateBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIPeriodDetailRepository_CreateBatch_Call) RunAndReturn(run func(context.Context, []period_detail.PeriodDetail) error) *MockIPeriodDetailRepository_CreateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockIPeriodDetailRepository) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIPeriodDetailRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIPeriodDetailRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockIPeriodDetailRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockIPeriodDetailRepository_Delete_Call {
	return &MockIPeriodDetailRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockIPeriodDetailRepository_Delete_Call) Run(run func(ctx context.Context, id uint)) *MockIPeriodDetailRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockIPeriodDetailRepository_Delete_Call) Return(_a0 error) *MockIPeriodDetailRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIPeriodDetailRepository_Delete_Call) RunAndReturn(run func(context.Context, uint) error) *MockIPeriodDetailRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByPeriodID provides a mock function with given fields: ctx, periodID
func (_m *MockIPeriodDetailRepository) DeleteByPeriodID(ctx context.Context, periodID uint) error {
	ret := _m.Called(ctx, periodID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByPeriodID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, periodID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIPeriodDetailRepository_DeleteByPeriodID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByPeriodID'
type MockIPeriodDetailRepository_DeleteByPeriodID_Call struct {
	*mock.Call
}

// DeleteByPeriodID is a helper method to define mock.On call
//   - ctx context.Context
//   - periodID uint
func (_e *MockIPeriodDetailRepository_Expecter) DeleteByPeriodID(ctx interface{}, periodID interface{}) *MockIPeriodDetailRepository_DeleteByPeriodID_Call {
	return &MockIPeriodDetailRepository_DeleteByPeriodID_Call{Call: _e.mock.On("DeleteByPeriodID", ctx, periodID)}
}

func (_c *MockIPeriodDetailRepository_DeleteByPeriodID_Call) Run(run func(ctx context.Context, periodID uint)) *MockIPeriodDetailRepository_DeleteByPeriodID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockIPeriodDetailRepository_DeleteByPeriodID_Call) Return(_a0 error) *MockIPeriodDetailRepository_DeleteByPeriodID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIPeriodDetailRepository_DeleteByPeriodID_Call) RunAndReturn(run func(context.Context, uint) error) *MockIPeriodDetailRepository_DeleteByPeriodID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockIPeriodDetailRepository) GetByID(ctx context.Context, id uint) (*period_detail.PeriodDetail, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *period_detail.PeriodDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*period_detail.PeriodDetail, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *period_detail.PeriodDetail); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*period_detail.PeriodDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPeriodDetailRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIPeriodDetailRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockIPeriodDetailRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockIPeriodDetailRepository_GetByID_Call {
	return &MockIPeriodDetailRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockIPeriodDetailRepository_GetByID_Call) Run(run func(ctx context.Context, id uint)) *MockIPeriodDetailRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockIPeriodDetailRepository_GetByID_Call) Return(_a0 *period_detail.PeriodDetail, _a1 error) *MockIPeriodDetailRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPeriodDetailRepository_GetByID_Call) RunAndReturn(run func(context.Context, uint) (*period_detail.PeriodDetail, error)) *MockIPeriodDetailRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPeriodAndUser provides a mock function with given fields: ctx, periodID, userID
func (_m *MockIPeriodDetailRepository) GetByPeriodAndUser(ctx context.Context, periodID uint, userID uint) (*period_detail.PeriodDetail, error) {
	ret := _m.Called(ctx, periodID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByPeriodAndUser")
	}

	var r0 *period_detail.PeriodDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) (*period_detail.PeriodDetail, error)); ok {
		return rf(ctx, periodID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) *period_detail.PeriodDetail); ok {
		r0 = rf(ctx, periodID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*period_detail.PeriodDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, periodID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPeriodDetailRepository_GetByPeriodAndUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPeriodAndUser'
type MockIPeriodDetailRepository_GetByPeriodAndUser_Call struct {
	*mock.Call
}

// GetByPeriodAndUser is a helper method to define mock.On call
//   - ctx context.Context
//   - periodID uint
//   - userID uint
func (_e *MockIPeriodDetailRepository_Expecter) GetByPeriodAndUser(ctx interface{}, periodID interface{}, userID interface{}) *MockIPeriodDetailRepository_GetByPeriodAndUser_Call {
	return &MockIPeriodDetailRepository_GetByPeriodAndUser_Call{Call: _e.mock.On("GetByPeriodAndUser", ctx, periodID, userID)}
}

func (_c *MockIPeriodDetailRepository_GetByPeriodAndUser_Call) Run(run func(ctx context.Context, periodID uint, userID uint)) *MockIPeriodDetailRepository_GetByPeriodAndUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(uint))
	})
	return _c
}

func (_c *MockIPeriodDetailRepository_GetByPeriodAndUser_Call) Return(_a0 *period_detail.PeriodDetail, _a1 error) *MockIPeriodDetailRepository_GetByPeriodAndUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPeriodDetailRepository_GetByPeriodAndUser_Call) RunAndReturn(run func(context.Context, uint, uint) (*period_detail.PeriodDetail, error)) *MockIPeriodDetailRepository_GetByPeriodAndUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetPayslipData provides a mock function with given fields: ctx, periodDetailID, userID
func (_m *MockIPeriodDetailRepository) GetPayslipData(ctx context.Context, periodDetailID uint, userID uint) (*payslip.PayslipData, error) {
	ret := _m.Called(ctx, periodDetailID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPayslipData")
	}

	var r0 *payslip.PayslipData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) (*payslip.PayslipData, error)); ok {
		return rf(ctx, periodDetailID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) *payslip.PayslipData); ok {
		r0 = rf(ctx, periodDetailID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payslip.PayslipData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, periodDetailID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPeriodDetailRepository_GetPayslipData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayslipData'
type MockIPeriodDetailRepository_GetPayslipData_Call struct {
	*mock.Call
}

// GetPayslipData is a helper method to define mock.On call
//   - ctx context.Context
//   - periodDetailID uint
//   - userID uint
func (_e *MockIPeriodDetailRepository_Expecter) GetPayslipData(ctx interface{}, periodDetailID interface{}, userID interface{}) *MockIPeriodDetailRepository_GetPayslipData_Call {
	return &MockIPeriodDetailRepository_GetPayslipData_Call{Call: _e.mock.On("GetPayslipData", ctx, periodDetailID, userID)}
}

func (_c *MockIPeriodDetailRepository_GetPayslipData_Call) Run(run func(ctx context.Context, periodDetailID uint, userID uint)) *MockIPeriodDetailRepository_GetPayslipData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(uint))
	})
	return _c
}

func (_c *MockIPeriodDetailRepository_GetPayslipData_Call) Return(_a0 *payslip.PayslipData, _a1 error) *MockIPeriodDetailRepository_GetPayslipData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPeriodDetailRepository_GetPayslipData_Call) RunAndReturn(run func(context.Context, uint, uint) (*payslip.PayslipData, error)) *MockIPeriodDetailRepository_GetPayslipData_Call {
	_c.Call.Return(run)
	return _c
}

// GetPayslipSummaryData provides a mock function with given fields: ctx, periodID
func (_m *MockIPeriodDetailRepository) GetPayslipSummaryData(ctx context.Context, periodID uint) (*payslip.PayslipSummaryData, error) {
	ret := _m.Called(ctx, periodID)

	if len(ret) == 0 {
		panic("no return value specified for GetPayslipSummaryData")
	}

	var r0 *payslip.PayslipSummaryData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*payslip.PayslipSummaryData, error)); ok {
		return rf(ctx, periodID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *payslip.PayslipSummaryData); ok {
		r0 = rf(ctx, periodID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payslip.PayslipSummaryData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, periodID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPeriodDetailRepository_GetPayslipSummaryData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayslipSummaryData'
type MockIPeriodDetailRepository_GetPayslipSummaryData_Call struct {
	*mock.Call
}

// GetPayslipSummaryData is a helper method to define mock.On call
//   - ctx context.Context
//   - periodID uint
func (_e *MockIPeriodDetailRepository_Expecter) GetPayslipSummaryData(ctx interface{}, periodID interface{}) *MockIPeriodDetailRepository_GetPayslipSummaryData_Call {
	return &MockIPeriodDetailRepository_GetPayslipSummaryData_Call{Call: _e.mock.On("GetPayslipSummaryData", ctx, periodID)}
}

func (_c *MockIPeriodDetailRepository_GetPayslipSummaryData_Call) Run(run func(ctx context.Context, periodID uint)) *MockIPeriodDetailRepository_GetPayslipSummaryData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockIPeriodDetailRepository_GetPayslipSummaryData_Call) Return(_a0 *payslip.PayslipSummaryData, _a1 error) *MockIPeriodDetailRepository_GetPayslipSummaryData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPeriodDetailRepository_GetPayslipSummaryData_Call) RunAndReturn(run func(context.Context, uint) (*payslip.PayslipSummaryData, error)) *MockIPeriodDetailRepository_GetPayslipSummaryData_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByBatch provides a mock function with given fields: ctx, lastID, limit
func (_m *MockIPeriodDetailRepository) GetUsersByBatch(ctx context.Context, lastID uint, limit int) ([]uint, error) {
	ret := _m.Called(ctx, lastID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByBatch")
	}

	var r0 []uint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, int) ([]uint, error)); ok {
		return rf(ctx, lastID, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, int) []uint); ok {
		r0 = rf(ctx, lastID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, int) error); ok {
		r1 = rf(ctx, lastID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPeriodDetailRepository_GetUsersByBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByBatch'
type MockIPeriodDetailRepository_GetUsersByBatch_Call struct {
	*mock.Call
}

// GetUsersByBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - lastID uint
//   - limit int
func (_e *MockIPeriodDetailRepository_Expecter) GetUsersByBatch(ctx interface{}, lastID interface{}, limit interface{}) *MockIPeriodDetailRepository_GetUsersByBatch_Call {
	return &MockIPeriodDetailRepository_GetUsersByBatch_Call{Call: _e.mock.On("GetUsersByBatch", ctx, lastID, limit)}
}

func (_c *MockIPeriodDetailRepository_GetUsersByBatch_Call) Run(run func(ctx context.Context, lastID uint, limit int)) *MockIPeriodDetailRepository_GetUsersByBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(int))
	})
	return _c
}

func (_c *MockIPeriodDetailRepository_GetUsersByBatch_Call) Return(_a0 []uint, _a1 error) *MockIPeriodDetailRepository_GetUsersByBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPeriodDetailRepository_GetUsersByBatch_Call) RunAndReturn(run func(context.Context, uint, int) ([]uint, error)) *MockIPeriodDetailRepository_GetUsersByBatch_Call {
	_c.Call.Return(run)
	return _c
}

// ListPayslip provides a mock function with given fields: ctx, req, userID
func (_m *MockIPeriodDetailRepository) ListPayslip(ctx context.Context, req payslip.PayslipListRequest, userID uint) (*payslip.PayslipListResponse, error) {
	ret := _m.Called(ctx, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListPayslip")
	}

	var r0 *payslip.PayslipListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, payslip.PayslipListRequest, uint) (*payslip.PayslipListResponse, error)); ok {
		return rf(ctx, req, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, payslip.PayslipListRequest, uint) *payslip.PayslipListResponse); ok {
		r0 = rf(ctx, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payslip.PayslipListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, payslip.PayslipListRequest, uint) error); ok {
		r1 = rf(ctx, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPeriodDetailRepository_ListPayslip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPayslip'
type MockIPeriodDetailRepository_ListPayslip_Call struct {
	*mock.Call
}

// ListPayslip is a helper method to define mock.On call
//   - ctx context.Context
//   - req payslip.PayslipListRequest
//   - userID uint
func (_e *MockIPeriodDetailRepository_Expecter) ListPayslip(ctx interface{}, req interface{}, userID interface{}) *MockIPeriodDetailRepository_ListPayslip_Call {
	return &MockIPeriodDetailRepository_ListPayslip_Call{Call: _e.mock.On("ListPayslip", ctx, req, userID)}
}

func (_c *MockIPeriodDetailRepository_ListPayslip_Call) Run(run func(ctx context.Context, req payslip.PayslipListRequest, userID uint)) *MockIPeriodDetailRepository_ListPayslip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(payslip.PayslipListRequest), args[2].(uint))
	})
	return _c
}

func (_c *MockIPeriodDetailRepository_ListPayslip_Call) Return(_a0 *payslip.PayslipListResponse, _a1 error) *MockIPeriodDetailRepository_ListPayslip_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPeriodDetailRepository_ListPayslip_Call) RunAndReturn(run func(context.Context, payslip.PayslipListRequest, uint) (*payslip.PayslipListResponse, error)) *MockIPeriodDetailRepository_ListPayslip_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, updates
func (_m *MockIPeriodDetailRepository) Update(ctx context.Context, id uint, updates map[string]interface{}) error {
	ret := _m.Called(ctx, id, updates)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, map[string]interface{}) error); ok {
		r0 = rf(ctx, id, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIPeriodDetailRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIPeriodDetailRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
//   - updates map[string]interface{}
func (_e *MockIPeriodDetailRepository_Expecter) Update(ctx interface{}, id interface{}, updates interface{}) *MockIPeriodDetailRepository_Update_Call {
	return &MockIPeriodDetailRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, updates)}
}

func (_c *MockIPeriodDetailRepository_Update_Call) Run(run func(ctx context.Context, id uint, updates map[string]interface{})) *MockIPeriodDetailRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockIPeriodDetailRepository_Update_Call) Return(_a0 error) *MockIPeriodDetailRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIPeriodDetailRepository_Update_Call) RunAndReturn(run func(context.Context, uint, map[string]interface{}) error) *MockIPeriodDetailRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIPeriodDetailRepository creates a new instance of MockIPeriodDetailRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPeriodDetailRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPeriodDetailRepository {
	mock := &MockIPeriodDetailRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
