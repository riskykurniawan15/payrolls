// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	reimbursement "github.com/riskykurniawan15/payrolls/models/reimbursement"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockIReimbursementRepository is an autogenerated mock type for the IReimbursementRepository type
type MockIReimbursementRepository struct {
	mock.Mock
}

type MockIReimbursementRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIReimbursementRepository) EXPECT() *MockIReimbursementRepository_Expecter {
	return &MockIReimbursementRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *MockIReimbursementRepository) Create(ctx context.Context, _a1 *reimbursement.Reimbursement) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *reimbursement.Reimbursement) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIReimbursementRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIReimbursementRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *reimbursement.Reimbursement
func (_e *MockIReimbursementRepository_Expecter) Create(ctx interface{}, _a1 interface{}) *MockIReimbursementRepository_Create_Call {
	return &MockIReimbursementRepository_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *MockIReimbursementRepository_Create_Call) Run(run func(ctx context.Context, _a1 *reimbursement.Reimbursement)) *MockIReimbursementRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*reimbursement.Reimbursement))
	})
	return _c
}

func (_c *MockIReimbursementRepository_Create_Call) Return(_a0 error) *MockIReimbursementRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIReimbursementRepository_Create_Call) RunAndReturn(run func(context.Context, *reimbursement.Reimbursement) error) *MockIReimbursementRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockIReimbursementRepository) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIReimbursementRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIReimbursementRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockIReimbursementRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockIReimbursementRepository_Delete_Call {
	return &MockIReimbursementRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockIReimbursementRepository_Delete_Call) Run(run func(ctx context.Context, id uint)) *MockIReimbursementRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockIReimbursementRepository_Delete_Call) Return(_a0 error) *MockIReimbursementRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIReimbursementRepository_Delete_Call) RunAndReturn(run func(context.Context, uint) error) *MockIReimbursementRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockIReimbursementRepository) GetByID(ctx context.Context, id uint) (*reimbursement.Reimbursement, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *reimbursement.Reimbursement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*reimbursement.Reimbursement, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *reimbursement.Reimbursement); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reimbursement.Reimbursement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIReimbursementRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIReimbursementRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockIReimbursementRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockIReimbursementRepository_GetByID_Call {
	return &MockIReimbursementRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockIReimbursementRepository_GetByID_Call) Run(run func(ctx context.Context, id uint)) *MockIReimbursementRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockIReimbursementRepository_GetByID_Call) Return(_a0 *reimbursement.Reimbursement, _a1 error) *MockIReimbursementRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIReimbursementRepository_GetByID_Call) RunAndReturn(run func(context.Context, uint) (*reimbursement.Reimbursement, error)) *MockIReimbursementRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserAndDateRange provides a mock function with given fields: ctx, userID, startDate, endDate
func (_m *MockIReimbursementRepository) GetByUserAndDateRange(ctx context.Context, userID uint, startDate time.Time, endDate time.Time) ([]reimbursement.Reimbursement, error) {
	ret := _m.Called(ctx, userID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserAndDateRange")
	}

	var r0 []reimbursement.Reimbursement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, time.Time, time.Time) ([]reimbursement.Reimbursement, error)); ok {
		return rf(ctx, userID, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, time.Time, time.Time) []reimbursement.Reimbursement); ok {
		r0 = rf(ctx, userID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reimbursement.Reimbursement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, time.Time, time.Time) error); ok {
		r1 = rf(ctx, userID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIReimbursementRepository_GetByUserAndDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserAndDateRange'
type MockIReimbursementRepository_GetByUserAndDateRange_Call struct {
	*mock.Call
}

// GetByUserAndDateRange is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint
//   - startDate time.Time
//   - endDate time.Time
func (_e *MockIReimbursementRepository_Expecter) GetByUserAndDateRange(ctx interface{}, userID interface{}, startDate interface{}, endDate interface{}) *MockIReimbursementRepository_GetByUserAndDateRange_Call {
	return &MockIReimbursementRepository_GetByUserAndDateRange_Call{Call: _e.mock.On("GetByUserAndDateRange", ctx, userID, startDate, endDate)}
}

func (_c *MockIReimbursementRepository_GetByUserAndDateRange_Call) Run(run func(ctx context.Context, userID uint, startDate time.Time, endDate time.Time)) *MockIReimbursementRepository_GetByUserAndDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(time.Time), args[3].(time.Time))
	})
	return _c
}

func (_c *MockIReimbursementRepository_GetByUserAndDateRange_Call) Return(_a0 []reimbursement.Reimbursement, _a1 error) *MockIReimbursementRepository_GetByUserAndDateRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIReimbursementRepository_GetByUserAndDateRange_Call) RunAndReturn(run func(context.Context, uint, time.Time, time.Time) ([]reimbursement.Reimbursement, error)) *MockIReimbursementRepository_GetByUserAndDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, req, userID
func (_m *MockIReimbursementRepository) List(ctx context.Context, req reimbursement.ListReimbursementsRequest, userID uint) (*reimbursement.ListReimbursementsResponse, error) {
	ret := _m.Called(ctx, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *reimbursement.ListReimbursementsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, reimbursement.ListReimbursementsRequest, uint) (*reimbursement.ListReimbursementsResponse, error)); ok {
		return rf(ctx, req, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, reimbursement.ListReimbursementsRequest, uint) *reimbursement.ListReimbursementsResponse); ok {
		r0 = rf(ctx, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reimbursement.ListReimbursementsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, reimbursement.ListReimbursementsRequest, uint) error); ok {
		r1 = rf(ctx, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIReimbursementRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockIReimbursementRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - req reimbursement.ListReimbursementsRequest
//   - userID uint
func (_e *MockIReimbursementRepository_Expecter) List(ctx interface{}, req interface{}, userID interface{}) *MockIReimbursementRepository_List_Call {
	return &MockIReimbursementRepository_List_Call{Call: _e.mock.On("List", ctx, req, userID)}
}

func (_c *MockIReimbursementRepository_List_Call) Run(run func(ctx context.Context, req reimbursement.ListReimbursementsRequest, userID uint)) *MockIReimbursementRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(reimbursement.ListReimbursementsRequest), args[2].(uint))
	})
	return _c
}

func (_c *MockIReimbursementRepository_List_Call) Return(_a0 *reimbursement.ListReimbursementsResponse, _a1 error) *MockIReimbursementRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIReimbursementRepository_List_Call) RunAndReturn(run func(context.Context, reimbursement.ListReimbursementsRequest, uint) (*reimbursement.ListReimbursementsResponse, error)) *MockIReimbursementRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, updates
func (_m *MockIReimbursementRepository) Update(ctx context.Context, id uint, updates map[string]interface{}) error {
	ret := _m.Called(ctx, id, updates)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, map[string]interface{}) error); ok {
		r0 = rf(ctx, id, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIReimbursementRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIReimbursementRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
//   - updates map[string]interface{}
func (_e *MockIReimbursementRepository_Expecter) Update(ctx interface{}, id interface{}, updates interface{}) *MockIReimbursementRepository_Update_Call {
	return &MockIReimbursementRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, updates)}
}

func (_c *MockIReimbursementRepository_Update_Call) Run(run func(ctx context.Context, id uint, updates map[string]interface{})) *MockIReimbursementRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockIReimbursementRepository_Update_Call) Return(_a0 error) *MockIReimbursementRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIReimbursementRepository_Update_Call) RunAndReturn(run func(context.Context, uint, map[string]interface{}) error) *MockIReimbursementRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIReimbursementRepository creates a new instance of MockIReimbursementRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIReimbursementRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIReimbursementRepository {
	mock := &MockIReimbursementRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
