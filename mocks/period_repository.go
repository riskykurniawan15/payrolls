// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	modelsperiod "github.com/riskykurniawan15/payrolls/models/period"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockIPeriodRepository is an autogenerated mock type for the IPeriodRepository type
type MockIPeriodRepository struct {
	mock.Mock
}

type MockIPeriodRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIPeriodRepository) EXPECT() *MockIPeriodRepository_Expecter {
	return &MockIPeriodRepository_Expecter{mock: &_m.Mock}
}

// CheckDateConflict provides a mock function with given fields: ctx, startDate, endDate, excludeID
func (_m *MockIPeriodRepository) CheckDateConflict(ctx context.Context, startDate time.Time, endDate time.Time, excludeID ...uint) (bool, error) {
	_va := make([]interface{}, len(excludeID))
	for _i := range excludeID {
		_va[_i] = excludeID[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, startDate, endDate)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckDateConflict")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, ...uint) (bool, error)); ok {
		return rf(ctx, startDate, endDate, excludeID...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, ...uint) bool); ok {
		r0 = rf(ctx, startDate, endDate, excludeID...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, ...uint) error); ok {
		r1 = rf(ctx, startDate, endDate, excludeID...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPeriodRepository_CheckDateConflict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckDateConflict'
type MockIPeriodRepository_CheckDateConflict_Call struct {
	*mock.Call
}

// CheckDateConflict is a helper method to define mock.On call
//   - ctx context.Context
//   - startDate time.Time
//   - endDate time.Time
//   - excludeID ...uint
func (_e *MockIPeriodRepository_Expecter) CheckDateConflict(ctx interface{}, startDate interface{}, endDate interface{}, excludeID ...interface{}) *MockIPeriodRepository_CheckDateConflict_Call {
	return &MockIPeriodRepository_CheckDateConflict_Call{Call: _e.mock.On("CheckDateConflict",
		append([]interface{}{ctx, startDate, endDate}, excludeID...)...)}
}

func (_c *MockIPeriodRepository_CheckDateConflict_Call) Run(run func(ctx context.Context, startDate time.Time, endDate time.Time, excludeID ...uint)) *MockIPeriodRepository_CheckDateConflict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]uint, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(uint)
			}
		}
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), variadicArgs...)
	})
	return _c
}

func (_c *MockIPeriodRepository_CheckDateConflict_Call) Return(_a0 bool, _a1 error) *MockIPeriodRepository_CheckDateConflict_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPeriodRepository_CheckDateConflict_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, ...uint) (bool, error)) *MockIPeriodRepository_CheckDateConflict_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *MockIPeriodRepository) Create(ctx context.Context, _a1 *modelsperiod.Period) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelsperiod.Period) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIPeriodRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIPeriodRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *modelsperiod.Period
func (_e *MockIPeriodRepository_Expecter) Create(ctx interface{}, _a1 interface{}) *MockIPeriodRepository_Create_Call {
	return &MockIPeriodRepository_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *MockIPeriodRepository_Create_Call) Run(run func(ctx context.Context, _a1 *modelsperiod.Period)) *MockIPeriodRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*modelsperiod.Period))
	})
	return _c
}

func (_c *MockIPeriodRepository_Create_Call) Return(_a0 error) *MockIPeriodRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIPeriodRepository_Create_Call) RunAndReturn(run func(context.Context, *modelsperiod.Period) error) *MockIPeriodRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockIPeriodRepository) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIPeriodRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIPeriodRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockIPeriodRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockIPeriodRepository_Delete_Call {
	return &MockIPeriodRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockIPeriodRepository_Delete_Call) Run(run func(ctx context.Context, id uint)) *MockIPeriodRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockIPeriodRepository_Delete_Call) Return(_a0 error) *MockIPeriodRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIPeriodRepository_Delete_Call) RunAndReturn(run func(context.Context, uint) error) *MockIPeriodRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateUniqueCode provides a mock function with given fields: ctx
func (_m *MockIPeriodRepository) GenerateUniqueCode(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GenerateUniqueCode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPeriodRepository_GenerateUniqueCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateUniqueCode'
type MockIPeriodRepository_GenerateUniqueCode_Call struct {
	*mock.Call
}

// GenerateUniqueCode is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIPeriodRepository_Expecter) GenerateUniqueCode(ctx interface{}) *MockIPeriodRepository_GenerateUniqueCode_Call {
	return &MockIPeriodRepository_GenerateUniqueCode_Call{Call: _e.mock.On("GenerateUniqueCode", ctx)}
}

func (_c *MockIPeriodRepository_GenerateUniqueCode_Call) Run(run func(ctx context.Context)) *MockIPeriodRepository_GenerateUniqueCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIPeriodRepository_GenerateUniqueCode_Call) Return(_a0 string, _a1 error) *MockIPeriodRepository_GenerateUniqueCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPeriodRepository_GenerateUniqueCode_Call) RunAndReturn(run func(context.Context) (string, error)) *MockIPeriodRepository_GenerateUniqueCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCode provides a mock function with given fields: ctx, code
func (_m *MockIPeriodRepository) GetByCode(ctx context.Context, code string) (*modelsperiod.Period, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetByCode")
	}

	var r0 *modelsperiod.Period
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*modelsperiod.Period, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *modelsperiod.Period); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelsperiod.Period)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPeriodRepository_GetByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCode'
type MockIPeriodRepository_GetByCode_Call struct {
	*mock.Call
}

// GetByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *MockIPeriodRepository_Expecter) GetByCode(ctx interface{}, code interface{}) *MockIPeriodRepository_GetByCode_Call {
	return &MockIPeriodRepository_GetByCode_Call{Call: _e.mock.On("GetByCode", ctx, code)}
}

func (_c *MockIPeriodRepository_GetByCode_Call) Run(run func(ctx context.Context, code string)) *MockIPeriodRepository_GetByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIPeriodRepository_GetByCode_Call) Return(_a0 *modelsperiod.Period, _a1 error) *MockIPeriodRepository_GetByCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPeriodRepository_GetByCode_Call) RunAndReturn(run func(context.Context, string) (*modelsperiod.Period, error)) *MockIPeriodRepository_GetByCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockIPeriodRepository) GetByID(ctx context.Context, id uint) (*modelsperiod.Period, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *modelsperiod.Period
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*modelsperiod.Period, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *modelsperiod.Period); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelsperiod.Period)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPeriodRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIPeriodRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *MockIPeriodRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockIPeriodRepository_GetByID_Call {
	return &MockIPeriodRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockIPeriodRepository_GetByID_Call) Run(run func(ctx context.Context, id uint)) *MockIPeriodRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockIPeriodRepository_GetByID_Call) Return(_a0 *modelsperiod.Period, _a1 error) *MockIPeriodRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPeriodRepository_GetByID_Call) RunAndReturn(run func(context.Context, uint) (*modelsperiod.Period, error)) *MockIPeriodRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetConflictingPeriods provides a mock function with given fields: ctx, startDate, endDate, excludeID
func (_m *MockIPeriodRepository) GetConflictingPeriods(ctx context.Context, startDate time.Time, endDate time.Time, excludeID ...uint) ([]modelsperiod.Period, error) {
	_va := make([]interface{}, len(excludeID))
	for _i := range excludeID {
		_va[_i] = excludeID[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, startDate, endDate)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConflictingPeriods")
	}

	var r0 []modelsperiod.Period
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, ...uint) ([]modelsperiod.Period, error)); ok {
		return rf(ctx, startDate, endDate, excludeID...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, ...uint) []modelsperiod.Period); ok {
		r0 = rf(ctx, startDate, endDate, excludeID...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]modelsperiod.Period)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, ...uint) error); ok {
		r1 = rf(ctx, startDate, endDate, excludeID...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPeriodRepository_GetConflictingPeriods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConflictingPeriods'
type MockIPeriodRepository_GetConflictingPeriods_Call struct {
	*mock.Call
}

// GetConflictingPeriods is a helper method to define mock.On call
//   - ctx context.Context
//   - startDate time.Time
//   - endDate time.Time
//   - excludeID ...uint
func (_e *MockIPeriodRepository_Expecter) GetConflictingPeriods(ctx interface{}, startDate interface{}, endDate interface{}, excludeID ...interface{}) *MockIPeriodRepository_GetConflictingPeriods_Call {
	return &MockIPeriodRepository_GetConflictingPeriods_Call{Call: _e.mock.On("GetConflictingPeriods",
		append([]interface{}{ctx, startDate, endDate}, excludeID...)...)}
}

func (_c *MockIPeriodRepository_GetConflictingPeriods_Call) Run(run func(ctx context.Context, startDate time.Time, endDate time.Time, excludeID ...uint)) *MockIPeriodRepository_GetConflictingPeriods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]uint, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(uint)
			}
		}
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time), variadicArgs...)
	})
	return _c
}

func (_c *MockIPeriodRepository_GetConflictingPeriods_Call) Return(_a0 []modelsperiod.Period, _a1 error) *MockIPeriodRepository_GetConflictingPeriods_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPeriodRepository_GetConflictingPeriods_Call) RunAndReturn(run func(context.Context, time.Time, time.Time, ...uint) ([]modelsperiod.Period, error)) *MockIPeriodRepository_GetConflictingPeriods_Call {
	_c.Call.Return(run)
	return _c
}

// IsCodeExists provides a mock function with given fields: ctx, code, excludeID
func (_m *MockIPeriodRepository) IsCodeExists(ctx context.Context, code string, excludeID ...uint) (bool, error) {
	_va := make([]interface{}, len(excludeID))
	for _i := range excludeID {
		_va[_i] = excludeID[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, code)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IsCodeExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...uint) (bool, error)); ok {
		return rf(ctx, code, excludeID...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...uint) bool); ok {
		r0 = rf(ctx, code, excludeID...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...uint) error); ok {
		r1 = rf(ctx, code, excludeID...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPeriodRepository_IsCodeExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCodeExists'
type MockIPeriodRepository_IsCodeExists_Call struct {
	*mock.Call
}

// IsCodeExists is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - excludeID ...uint
func (_e *MockIPeriodRepository_Expecter) IsCodeExists(ctx interface{}, code interface{}, excludeID ...interface{}) *MockIPeriodRepository_IsCodeExists_Call {
	return &MockIPeriodRepository_IsCodeExists_Call{Call: _e.mock.On("IsCodeExists",
		append([]interface{}{ctx, code}, excludeID...)...)}
}

func (_c *MockIPeriodRepository_IsCodeExists_Call) Run(run func(ctx context.Context, code string, excludeID ...uint)) *MockIPeriodRepository_IsCodeExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]uint, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(uint)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockIPeriodRepository_IsCodeExists_Call) Return(_a0 bool, _a1 error) *MockIPeriodRepository_IsCodeExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPeriodRepository_IsCodeExists_Call) RunAndReturn(run func(context.Context, string, ...uint) (bool, error)) *MockIPeriodRepository_IsCodeExists_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, req
func (_m *MockIPeriodRepository) List(ctx context.Context, req modelsperiod.ListPeriodsRequest) (*modelsperiod.ListPeriodsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *modelsperiod.ListPeriodsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, modelsperiod.ListPeriodsRequest) (*modelsperiod.ListPeriodsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, modelsperiod.ListPeriodsRequest) *modelsperiod.ListPeriodsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelsperiod.ListPeriodsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, modelsperiod.ListPeriodsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPeriodRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockIPeriodRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - req modelsperiod.ListPeriodsRequest
func (_e *MockIPeriodRepository_Expecter) List(ctx interface{}, req interface{}) *MockIPeriodRepository_List_Call {
	return &MockIPeriodRepository_List_Call{Call: _e.mock.On("List", ctx, req)}
}

func (_c *MockIPeriodRepository_List_Call) Run(run func(ctx context.Context, req modelsperiod.ListPeriodsRequest)) *MockIPeriodRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(modelsperiod.ListPeriodsRequest))
	})
	return _c
}

func (_c *MockIPeriodRepository_List_Call) Return(_a0 *modelsperiod.ListPeriodsResponse, _a1 error) *MockIPeriodRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPeriodRepository_List_Call) RunAndReturn(run func(context.Context, modelsperiod.ListPeriodsRequest) (*modelsperiod.ListPeriodsResponse, error)) *MockIPeriodRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, updates
func (_m *MockIPeriodRepository) Update(ctx context.Context, id uint, updates map[string]interface{}) error {
	ret := _m.Called(ctx, id, updates)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, map[string]interface{}) error); ok {
		r0 = rf(ctx, id, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIPeriodRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIPeriodRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
//   - updates map[string]interface{}
func (_e *MockIPeriodRepository_Expecter) Update(ctx interface{}, id interface{}, updates interface{}) *MockIPeriodRepository_Update_Call {
	return &MockIPeriodRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, updates)}
}

func (_c *MockIPeriodRepository_Update_Call) Run(run func(ctx context.Context, id uint, updates map[string]interface{})) *MockIPeriodRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockIPeriodRepository_Update_Call) Return(_a0 error) *MockIPeriodRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIPeriodRepository_Update_Call) RunAndReturn(run func(context.Context, uint, map[string]interface{}) error) *MockIPeriodRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIPeriodRepository creates a new instance of MockIPeriodRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPeriodRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPeriodRepository {
	mock := &MockIPeriodRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
